{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pr\u00e9sentation : Docker 1. Introduction Dans cette pr\u00e9sention, je vous donnerai des r\u00e9ponses aux questions suivantes : Conteneurs Linux LXC et Conteneurs Docker: Quelle(s) diff\u00e9rence(s)? Pourquoi utiliser des conteneurs plut\u00f4t que des Machines Virtuelles? Pourquoi utilise-t-on Docker et quelles sont ses atouts dans le d\u00e9veloppement et le d\u00e9ploiement des applications cloud-native? Conteneurs, sont-ils vraiment populaires dans les Data Center / Cloud Computing? Docker, Cloud, DevOps et microservices, quel lien? PS : les chapitres 1 & 2 ne contiennent que des explications visuelles, la r\u00e9daction commence \u00e0 la fin du chapitre 2. Big Picture ... Infrastructure IT: Changement de vitesse Docker (utilisation 2021) Adoption de la Technologie Conteneur Docker La Technologie Conteneur r\u00e9volutionne le Cloud Docker = La voie vers DevOps DevOps = Int\u00e9gration Continue & D\u00e9ploiement Continu (CI/CD) 2. Le Challenge Services ET Environnements multiples : Comment d\u00e9ployer? Produits ET Moyens multiples = Comment transporter? Usage des conteneurs = Portabilit\u00e9 Qu\u2019est ce qu\u2019un Conteneur ? Un processus s\u2019ex\u00e9cutant sur son propre syst\u00e8me de fichiers Vision limit\u00e9e du syst\u00e8me sur lequel il tourne Optimisation de l'usage des ressources Le noyau quant \u00e0 lui, est partag\u00e9 avec le syst\u00e8me h\u00f4te. D\u00e9riv\u00e9 du principe de CHROOT (sous Unix) et de m\u00e9canisme d\u2019isolation de syst\u00e8me de fichiers Une application packag\u00e9e dans un Rootfs Un Rootfs (le / d'un Linux) qui est appel\u00e9 image contient : 3. Conteneur Linux LXC LXC : C\u2019est quoi? La virtualisation par conteneurs se base sur la virtualisation Linux LXC, pour Linux Containers. Il s\u2019agit d\u2019une m\u00e9thode de cloisonnement au niveau de l\u2019OS. LXC est utilis\u00e9 pour faire fonctionner plusieurs instances Linux isol\u00e9s les uns des autres dans des conteneurs partageant le m\u00eame noyau et une petite partie du syst\u00e8me h\u00f4te. Chroot par rapport \u00e0 LXC Chroot est moins s\u00e9curis\u00e9 : Un conteneur chroot\u00e9 partage son /proc et son /dev avec l'h\u00f4te, et il a donc tout libert\u00e9 pour s'introduire dans le syst\u00e8me Chroot donne une isolation moins faible : M\u00eame si le syst\u00e8me de fichier d\u2019un conteneur est correctement isol\u00e9, les processus (li\u00e9s aux services qui tournent dedans) ne sont pas isol\u00e9s (ils peuvent voir ceux de l\u2019h\u00f4te) Les services d\u2019un conteneur \u00e9coutent sur la m\u00eame interface r\u00e9seau Il n'est pas pratique du tout d\u00e9s qu'il s'agit de faire tourner plein de services dans le conteneur LXC offre un jeu de nouvelles techniques d\u2019isolation dans le kernel permettant de cr\u00e9er facilement un super-chroot beaucoup plus isolant que la version d'origine. LXC : Technologies de base LXC repose sur la notion de groupes de contr\u00f4le Linux (cgroups) disponibles depuis sa version 2.6.24 Chaque groupe de contr\u00f4le permet de limiter et d\u2019isoler l\u2019utilisation des ressources qu\u2019un processus peut utiliser (processeur, m\u00e9moire, r\u00e9seau, syst\u00e8me de fichier et acc\u00e8s E/S), et ce sans recourir \u00e0 des machines virtuelles \u00e0 part enti\u00e8re. LXC repose aussi sur une isolation des espaces de nommage du noyau (namespace): Permet d\u2019emp\u00eacher qu\u2019un groupe puisse \u00ab voir \u00bb les ressources des autres groupes (syst\u00e8mes de fichiers, les ID r\u00e9seau et les ID utilisateur) LXC repose sur les biblioth\u00e8ques Profils Apparmor (Application Armor) et SELinux (Security-Enhanced Linux) pour la s\u00e9curit\u00e9 : En termes des restrictions, permissions et droits utilisateur LXC : Vue d\u2019ensemble Docker : Un LXC augment\u00e9 Docker ne remplace pas les conteneurs Linux LXC (lanc\u00e9 en 2013) L'id\u00e9e consiste \u00e0 utiliser LXC comme base, puis \u00e0 ajouter des capacit\u00e9s de niveau sup\u00e9rieur Docker autorise la portabilit\u00e9 entre machines (qui ex\u00e9cutent aussi Docker) et permet ainsi \u00e0 une application et \u00e0 ses composants d'exister en tant qu'objet mobile unique. Avec LXC, d\u00e9placer une application sur une autre machine peut introduire des diff\u00e9rences susceptibles d'emp\u00eacher le conteneur de l'application de s'ex\u00e9cuter. Docker pour les DEV Build once\u2026 run everywhere Un conteneur Docker est un environnement s\u00e9curis\u00e9, stable, portable sur tous environnements Docker r\u00e9sout les probl\u00e8mes de d\u00e9pendances ou de packages manquant lors du d\u00e9ploiement Docker pour les DEV Configure once\u2026 run everywhere Rend le cycle de vie des applications plus efficace, consistant, et reproductible Am\u00e9liore le rendu de la qualit\u00e9 du code d\u00e9velopp\u00e9 \u00c9limine d\u00e9finitivement les inconsistances entre les diff\u00e9rents environnements de d\u00e9veloppement, test, et production Docker pour l\u2019entreprise Une m\u00eame plate-forme pour toutes les applications Acc\u00e9l\u00e8re la mise en place de pipelines de d\u00e9ploiement automatiques Interface commune qui permet aux Devs et Ops de travailler ensemble Am\u00e9liore l\u2019autonomie et la productivit\u00e9 des \u00e9quipes Dev et Ops ==> Agilit\u00e9, Portabilit\u00e9, Consistance, Optimisation des co\u00fbts, Elasticit\u00e9/Scalabilit\u00e9\u2026 Histoire 2008 : dotCloud, co-fond\u00e9e by Solomon Hykes PaaS o D\u00e9but de la plate-forme Docker qui simplifie l\u2019usage des containers Linux 2010 : dotCloud incub\u00e9e \u00e0 Ycombinator 2011 : Plate-forme Docker mise en open source 2013 : Cr\u00e9ation de Docker.Inc pour soutenir le projet 2017 : Dissociation du produit Docker et du projet Moby Format des conteneurs Docker Avant Docker 0.9 Utilisation de la technologie LXC pour g\u00e9rer les containers Depuis Docker 0.9 Access direct \u00e0 l\u2019API des containers Linux Utilisation de la librairie libcontainer (un wrapper qui combine les Namespaces + Cgroup + UnionFS) UnionFS offre un stockage sur plusieurs couches en lecture seule (l\u00e9ger et rapide), utilis\u00e9 pour fournir les blocs de construction des conteneurs Editions Docker : CE et EE Open Container Initiative OCI D\u00e9marche initi\u00e9e par Docker et CoreOS et cr\u00e9\u00e9e par la Linux Foundation en 2015 Cr\u00e9er une gouvernance des technologies de containers (sp\u00e9cifications et standardisation minima autour des technologies de containerisation) Unification des formats de containers (Docker, Rocket\u2026) Standardiser les formats des images de containers pour faciliter l\u2019interop\u00e9rabilit\u00e9 entre les solutions du march\u00e9 et les cloud providers Standardiser certaines actions des moteurs \u00ab runtime \u00bb afin de disposer de commandes communes (start, exec, pause..) 4. Conteneurs VS Machines virtuelles Hyperviseur vs Docker Hyperviseur vs Docker (Analogie) Pourquoi des conteneurs plut\u00f4t que des machines virtuelles ? -Les conteneurs Docker r\u00e9volutionnent la virtualisation car l\u2019id\u00e9e n\u2019est pas nouvelle - La virtualisation a un co\u00fbt car les OS invit\u00e9s requi\u00e8rent chacun des ressources (m\u00e9moire, CPU, r\u00e9seaux) - Augmentation de la taille de chaque machine virtuelle, ce qui limite le nombre de machines virtuelles qu'un serveur peut h\u00e9berger - La conteneurisation vise \u00e0 virtualiser les applications sans trop alourdir le syst\u00e8me - Favoriser l'int\u00e9gration rapide d'applications dans des conteneurs. Des conteneurs dans des VMs ? 5. Plateforme Docker Docker : Vue d\u2019ensemble 6. Images Docker","title":"Home"},{"location":"#presentation-docker","text":"","title":"Pr\u00e9sentation : Docker"},{"location":"#1-introduction","text":"Dans cette pr\u00e9sention, je vous donnerai des r\u00e9ponses aux questions suivantes : Conteneurs Linux LXC et Conteneurs Docker: Quelle(s) diff\u00e9rence(s)? Pourquoi utiliser des conteneurs plut\u00f4t que des Machines Virtuelles? Pourquoi utilise-t-on Docker et quelles sont ses atouts dans le d\u00e9veloppement et le d\u00e9ploiement des applications cloud-native? Conteneurs, sont-ils vraiment populaires dans les Data Center / Cloud Computing? Docker, Cloud, DevOps et microservices, quel lien? PS : les chapitres 1 & 2 ne contiennent que des explications visuelles, la r\u00e9daction commence \u00e0 la fin du chapitre 2.","title":"1. Introduction"},{"location":"#big-picture","text":"","title":"Big Picture ..."},{"location":"#infrastructure-it-changement-de-vitesse","text":"","title":"Infrastructure IT: Changement de vitesse"},{"location":"#docker-utilisation-2021","text":"","title":"Docker (utilisation 2021)"},{"location":"#adoption-de-la-technologie-conteneur-docker","text":"","title":"Adoption de la Technologie Conteneur Docker"},{"location":"#la-technologie-conteneur-revolutionne-le-cloud","text":"","title":"La Technologie Conteneur r\u00e9volutionne le Cloud"},{"location":"#docker-la-voie-vers-devops","text":"DevOps = Int\u00e9gration Continue & D\u00e9ploiement Continu (CI/CD)","title":"Docker = La voie vers DevOps"},{"location":"#2-le-challenge","text":"","title":"2. Le Challenge"},{"location":"#services-et-environnements-multiples-comment-deployer","text":"","title":"Services ET Environnements multiples : Comment d\u00e9ployer?"},{"location":"#produits-et-moyens-multiples-comment-transporter","text":"","title":"Produits ET Moyens multiples = Comment transporter?"},{"location":"#usage-des-conteneurs-portabilite","text":"","title":"Usage des conteneurs = Portabilit\u00e9"},{"location":"#quest-ce-quun-conteneur","text":"Un processus s\u2019ex\u00e9cutant sur son propre syst\u00e8me de fichiers Vision limit\u00e9e du syst\u00e8me sur lequel il tourne Optimisation de l'usage des ressources Le noyau quant \u00e0 lui, est partag\u00e9 avec le syst\u00e8me h\u00f4te. D\u00e9riv\u00e9 du principe de CHROOT (sous Unix) et de m\u00e9canisme d\u2019isolation de syst\u00e8me de fichiers Une application packag\u00e9e dans un Rootfs Un Rootfs (le / d'un Linux) qui est appel\u00e9 image contient :","title":"Qu\u2019est ce qu\u2019un Conteneur ?"},{"location":"#3-conteneur-linux-lxc","text":"","title":"3. Conteneur Linux LXC"},{"location":"#lxc-cest-quoi","text":"La virtualisation par conteneurs se base sur la virtualisation Linux LXC, pour Linux Containers. Il s\u2019agit d\u2019une m\u00e9thode de cloisonnement au niveau de l\u2019OS. LXC est utilis\u00e9 pour faire fonctionner plusieurs instances Linux isol\u00e9s les uns des autres dans des conteneurs partageant le m\u00eame noyau et une petite partie du syst\u00e8me h\u00f4te.","title":"LXC : C\u2019est quoi?"},{"location":"#chroot-par-rapport-a-lxc","text":"Chroot est moins s\u00e9curis\u00e9 : Un conteneur chroot\u00e9 partage son /proc et son /dev avec l'h\u00f4te, et il a donc tout libert\u00e9 pour s'introduire dans le syst\u00e8me Chroot donne une isolation moins faible : M\u00eame si le syst\u00e8me de fichier d\u2019un conteneur est correctement isol\u00e9, les processus (li\u00e9s aux services qui tournent dedans) ne sont pas isol\u00e9s (ils peuvent voir ceux de l\u2019h\u00f4te) Les services d\u2019un conteneur \u00e9coutent sur la m\u00eame interface r\u00e9seau Il n'est pas pratique du tout d\u00e9s qu'il s'agit de faire tourner plein de services dans le conteneur LXC offre un jeu de nouvelles techniques d\u2019isolation dans le kernel permettant de cr\u00e9er facilement un super-chroot beaucoup plus isolant que la version d'origine.","title":"Chroot par rapport \u00e0 LXC"},{"location":"#lxc-technologies-de-base","text":"LXC repose sur la notion de groupes de contr\u00f4le Linux (cgroups) disponibles depuis sa version 2.6.24 Chaque groupe de contr\u00f4le permet de limiter et d\u2019isoler l\u2019utilisation des ressources qu\u2019un processus peut utiliser (processeur, m\u00e9moire, r\u00e9seau, syst\u00e8me de fichier et acc\u00e8s E/S), et ce sans recourir \u00e0 des machines virtuelles \u00e0 part enti\u00e8re. LXC repose aussi sur une isolation des espaces de nommage du noyau (namespace): Permet d\u2019emp\u00eacher qu\u2019un groupe puisse \u00ab voir \u00bb les ressources des autres groupes (syst\u00e8mes de fichiers, les ID r\u00e9seau et les ID utilisateur) LXC repose sur les biblioth\u00e8ques Profils Apparmor (Application Armor) et SELinux (Security-Enhanced Linux) pour la s\u00e9curit\u00e9 : En termes des restrictions, permissions et droits utilisateur","title":"LXC : Technologies de base"},{"location":"#lxc-vue-densemble","text":"","title":"LXC : Vue d\u2019ensemble"},{"location":"#docker-un-lxc-augmente","text":"Docker ne remplace pas les conteneurs Linux LXC (lanc\u00e9 en 2013) L'id\u00e9e consiste \u00e0 utiliser LXC comme base, puis \u00e0 ajouter des capacit\u00e9s de niveau sup\u00e9rieur Docker autorise la portabilit\u00e9 entre machines (qui ex\u00e9cutent aussi Docker) et permet ainsi \u00e0 une application et \u00e0 ses composants d'exister en tant qu'objet mobile unique. Avec LXC, d\u00e9placer une application sur une autre machine peut introduire des diff\u00e9rences susceptibles d'emp\u00eacher le conteneur de l'application de s'ex\u00e9cuter.","title":"Docker : Un LXC augment\u00e9"},{"location":"#docker-pour-les-dev","text":"Build once\u2026 run everywhere Un conteneur Docker est un environnement s\u00e9curis\u00e9, stable, portable sur tous environnements Docker r\u00e9sout les probl\u00e8mes de d\u00e9pendances ou de packages manquant lors du d\u00e9ploiement","title":"Docker pour les DEV"},{"location":"#docker-pour-les-dev_1","text":"Configure once\u2026 run everywhere Rend le cycle de vie des applications plus efficace, consistant, et reproductible Am\u00e9liore le rendu de la qualit\u00e9 du code d\u00e9velopp\u00e9 \u00c9limine d\u00e9finitivement les inconsistances entre les diff\u00e9rents environnements de d\u00e9veloppement, test, et production","title":"Docker pour les DEV"},{"location":"#docker-pour-lentreprise","text":"Une m\u00eame plate-forme pour toutes les applications Acc\u00e9l\u00e8re la mise en place de pipelines de d\u00e9ploiement automatiques Interface commune qui permet aux Devs et Ops de travailler ensemble Am\u00e9liore l\u2019autonomie et la productivit\u00e9 des \u00e9quipes Dev et Ops ==> Agilit\u00e9, Portabilit\u00e9, Consistance, Optimisation des co\u00fbts, Elasticit\u00e9/Scalabilit\u00e9\u2026","title":"Docker pour l\u2019entreprise"},{"location":"#histoire","text":"2008 : dotCloud, co-fond\u00e9e by Solomon Hykes PaaS o D\u00e9but de la plate-forme Docker qui simplifie l\u2019usage des containers Linux 2010 : dotCloud incub\u00e9e \u00e0 Ycombinator 2011 : Plate-forme Docker mise en open source 2013 : Cr\u00e9ation de Docker.Inc pour soutenir le projet 2017 : Dissociation du produit Docker et du projet Moby","title":"Histoire"},{"location":"#format-des-conteneurs-docker","text":"Avant Docker 0.9 Utilisation de la technologie LXC pour g\u00e9rer les containers Depuis Docker 0.9 Access direct \u00e0 l\u2019API des containers Linux Utilisation de la librairie libcontainer (un wrapper qui combine les Namespaces + Cgroup + UnionFS) UnionFS offre un stockage sur plusieurs couches en lecture seule (l\u00e9ger et rapide), utilis\u00e9 pour fournir les blocs de construction des conteneurs","title":"Format des conteneurs Docker"},{"location":"#editions-docker-ce-et-ee","text":"","title":"Editions Docker : CE et EE"},{"location":"#open-container-initiative-oci","text":"D\u00e9marche initi\u00e9e par Docker et CoreOS et cr\u00e9\u00e9e par la Linux Foundation en 2015 Cr\u00e9er une gouvernance des technologies de containers (sp\u00e9cifications et standardisation minima autour des technologies de containerisation) Unification des formats de containers (Docker, Rocket\u2026) Standardiser les formats des images de containers pour faciliter l\u2019interop\u00e9rabilit\u00e9 entre les solutions du march\u00e9 et les cloud providers Standardiser certaines actions des moteurs \u00ab runtime \u00bb afin de disposer de commandes communes (start, exec, pause..)","title":"Open Container Initiative OCI"},{"location":"#4-conteneurs-vs-machines-virtuelles","text":"","title":"4. Conteneurs VS Machines virtuelles"},{"location":"#hyperviseur-vs-docker","text":"","title":"Hyperviseur vs Docker"},{"location":"#hyperviseur-vs-docker-analogie","text":"Pourquoi des conteneurs plut\u00f4t que des machines virtuelles ? -Les conteneurs Docker r\u00e9volutionnent la virtualisation car l\u2019id\u00e9e n\u2019est pas nouvelle - La virtualisation a un co\u00fbt car les OS invit\u00e9s requi\u00e8rent chacun des ressources (m\u00e9moire, CPU, r\u00e9seaux) - Augmentation de la taille de chaque machine virtuelle, ce qui limite le nombre de machines virtuelles qu'un serveur peut h\u00e9berger - La conteneurisation vise \u00e0 virtualiser les applications sans trop alourdir le syst\u00e8me - Favoriser l'int\u00e9gration rapide d'applications dans des conteneurs.","title":"Hyperviseur vs Docker (Analogie)"},{"location":"#des-conteneurs-dans-des-vms","text":"","title":"Des conteneurs dans des VMs ?"},{"location":"#5-plateforme-docker","text":"","title":"5. Plateforme Docker"},{"location":"#docker-vue-densemble","text":"","title":"Docker : Vue d\u2019ensemble"},{"location":"#6-images-docker","text":"","title":"6. Images Docker"},{"location":"Cloud/AWS01/","text":"AWS : First Steps","title":"AWS"},{"location":"Cloud/AWS01/#aws-first-steps","text":"","title":"AWS : First Steps"},{"location":"Cloud/Azure01/","text":"Azure : Les fondamentaux","title":"Fondamentaux Azure"},{"location":"Cloud/Azure01/#azure-les-fondamentaux","text":"","title":"Azure : Les fondamentaux"},{"location":"Cloud/Google/","text":"Google Cloud : First Steps","title":"Google Cloud"},{"location":"Cloud/Google/#google-cloud-first-steps","text":"","title":"Google Cloud : First Steps"},{"location":"Docker/Docker/","text":"Docker : First Steps Lab 1 : Installation According to Docker Docs , Docker Engine can be installed in different ways, depending on our needs: - Most users set up Docker\u2019s repositories and install from them, for ease of installation and upgrade tasks. This is the recommended approach. Some users download the DEB package and install it manually and manage upgrades completely manually. This is useful in situations such as installing Docker on air-gapped systems with no access to the internet. In testing and development environments, some users choose to use automated convenience scripts to install Docker. Linux For Ubuntu 1. Set up the repository (Docker CE): Install packages to allow apt to use a repository over HTTPS. sudo apt-get update sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common Add Docker\u2019s official GPG key: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - - Set up the stable repository (amd64): sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $( lsb_release -cs ) stable\" 2. Install Docker sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io Executing the Docker Command Without Sudo (Optional): sudo usermod -aG docker $(whoami) Note You have to Log out and log back in so that your group membership is re-evaluated. Configure Docker to start on boot sudo systemctl enable docker.service sudo systemctl enable containerd.service Using the Docker Command sudo docker --help sudo docker info sudo docker \"subcommand\" --help For CentOS Installation options are available on Docker Docs for Centos Install using the repository sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo sudo yum install docker-ce docker-ce-cli containerd.io Start Docker Daemon sudo systemctl start docker sudo usermod -aG docker $USER sudo chmod 777 /var/run/docker.sock Windows 10 / 11 https://docs.docker.com/desktop/windows/install/ Lab 2: Build and Manager images (Dockerfile) Docker offers two types of images: OS images (ubuntu, debian, etc) Dockerized Services /Apps Images (http, nodejs, mongodb, etc) Images are stored in the Docker Registry (Local, or remote like Docker Hub and Docker Store) Different methods to create Docker image : Image pull : loads an archive of files, as a base layer Container commit : create new couche (+ image) from current container Image build : construction form a Dockerfile (commands list) Working with Docker Images : Search for images available on Docker Hub: sudo docker search Ubuntu Download ubuntu image to your computer sudo docker pull ubuntu Using default tag: latest latest: Pulling from library/ubuntu ea362f368469: Pull complete Digest: sha256:b5a61709a9a44284d88fb12e5c48db0409cfad5b69d4ff8224077c57302df9cf Status: Downloaded newer image for ubuntu:latest docker.io/library/ubuntu:latest List all local docker images: sudo docker images REPOSITORY TAG IMAGE ID CREATED SIZE ubuntu latest d13c942271d6 3 weeks ago 72.8MB Pull Ubuntu 20.04 image sudo docker pull ubuntu:20.04 List all local docker images: sudo docker images REPOSITORY TAG IMAGE ID CREATED SIZE ubuntu 20.04 d13c942271d6 3 weeks ago 72.8MB ubuntu latest d13c942271d6 3 weeks ago 72.8MB - Run a new container docker1 sudo docker run -it --name docker1 ubuntu:20.04 - Run a new container docker2 sudo docker run -dt --name docker2 ubuntu:20.04 Note d (detach): Run container in background and print container ID i (interactive): Keep STDIN open even if not attached t (tty): Allocate a pseudo-TTY Use the following combination of keys instead: CTRL + P + Q. This command allows to leave the container without turning it off. If you use the exit command again within the container, it will shut down Build Docker Images Write a Dockerfile (Openssh and Apache2) $ echo \\ \"FROM ubuntu:20.04 #Install Openssh Server, Apache2 and git ARG DEBIAN_FRONTEND=noninteractive RUN apt-get update && apt-get install -y openssh-server git apache2 vim #Configure ssh RUN mkdir /var/run/sshd RUN echo 'root:root' | chpasswd RUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config #Expose SSH and HTTP ports EXPOSE 22 80\">>Dockerfile Build image sudo docker build -t myimage . Sending build context to Docker daemon 22.96MB Step 1/6 : FROM ubuntu:20.04 ---> 4a689991aa24 Step 2/6 : RUN apt-get update && apt-get install -y openssh-server git apache2 python vim Removing intermediate container 02e7b71e66bf ---> a02abb273ca1 Step 3/6 : RUN mkdir /var/run/sshd ---> Running in 7debc3bd848a ^[[ARemoving intermediate container 7debc3bd848a ---> 43701b93496d Step 4/6 : RUN echo 'root:root' | chpasswd ---> Running in 4958eb98f69b Removing intermediate container 4958eb98f69b ---> 86051bdd6380 Step 5/6 : RUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config ---> Running in df9955a1969b Removing intermediate container df9955a1969b ---> ce0c596cd18b Step 6/6 : EXPOSE 22 80 ---> Running in 1ef65145106a Removing intermediate container 1ef65145106a ---> 4fdd24f1b727 Successfully built 4fdd24f1b727 Successfully tagged myimage:latest List all local docker images sudo docker images REPOSITORY TAG IMAGE ID CREATED SIZE myimage latest d83e3fd00475 40 seconds ago 365MB ubuntu 20.04 d13c942271d6 3 weeks ago 72.8MB ubuntu latest d13c942271d6 3 weeks ago 72.8MB Build new version 'v1.0' sudo docker build -t=\"myimage:v1.0\" . Sending build context to Docker daemon 2.048kB Step 1/7 : FROM ubuntu:20.04 ---> d13c942271d6 Step 2/7 : ARG DEBIAN_FRONTEND=noninteractive ---> Using cache ---> 1382eae51bd9 Step 3/7 : RUN apt-get update && apt-get install -y openssh-server git apache2 vim ---> Using cache ---> b46e2d48bebb Step 4/7 : RUN mkdir /var/run/sshd ---> Using cache ---> c5ac495fe893 Step 5/7 : RUN echo 'root:root' | chpasswd ---> Using cache ---> aed6d12fa09d Step 6/7 : RUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config ---> Using cache ---> 89c476d90de8 Step 7/7 : EXPOSE 22 80 ---> Using cache ---> d83e3fd00475 Successfully built d83e3fd00475 Successfully tagged myimage:v1.0 List all local docker images sudo docker images REPOSITORY TAG IMAGE ID CREATED SIZE myimage latest d83e3fd00475 6 minutes ago 365MB myimage v1.0 d83e3fd00475 6 minutes ago 365MB ubuntu 20.04 d13c942271d6 3 weeks ago 72.8MB ubuntu latest d13c942271d6 3 weeks ago 72.8MB Lab 3 : Manage Containers (Life Cycle, SSH, Port Forwarding) Create One container Remove all existing containers sudo docker rm -f $(sudo docker ps -a -q) Create a container with the new image sudo docker run -it --name docker1 myimage root@8cdc395b34ca:/# exit exit docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES docker start docker1 docker1 docker exec -d docker1 ls docker attach docker1 root@8cdc395b34ca:/# root@8cdc395b34ca:/# exit exit sudo docker run -dt --name docker2 myimage bin/sh -c \"while true; do echo hello world; sleep 1; done\" 7f192eb6f5bf7079843b30e1f7d3b2e7b4f8f12bb7c48a63101760e814633c07 # Display Docker2 logs sudo docker logs docker2 hello world hello world hello world hello world docker top docker2 UID PID PPID C STIME TTY TIME CMD root 18654 18630 0 17:50 pts/0 00:00:00 bin/sh -c while true; do echo hello world; sleep 1; done root 18908 18654 0 17:52 pts/0 00:00:00 sleep 1 # Stop the VMs sudo docker stop docker1 docker2 # Delete the VMs sudo docker rm docker1 docker2 Create 2 containers with port forwarding: There are two methods for assigning network ports to the Docker host: Docker can randomly assign a port (in the range 32768-61000) from the Docker host that it will map to the port 80 of the container. It is also possible to specify a port (for ex. 81 and 82) # Delete all containers sudo docker rm -f $(sudo docker ps -a -q) # Create 2 new containers sudo docker run -dt -p 81:80 --name docker1 myimage sudo docker run -dt -p 82:80 --name docker2 myimage sudo docker ps sudo docker info Access with SSH: Start SSH Daemon sudo docker exec -d docker1 /etc/init.d/ssh start sudo docker exec -d docker2 /etc/init.d/ssh start - Check IP Address of containers sudo docker inspect docker1 # get only the Ipv4 Adress sudo docker inspect --format '{{ .NetworkSettings.IPAddress }}' docker1 172.17.0.2 172.17.0.2 ssh root@172.17.0.2 # You can change the root password by running the following docker command: docker exec -itu 0 docker1 passwd Start Apache2 Server: Start Apache2 server sudo docker exec -d docker1 /etc/init.d/apache2 start sudo docker exec -d docker2 /etc/init.d/apache2 start - On browser try to connect : http://localhost:80 http://localhost:81 Delete all containers (runining and stoped) Running web application: Use Docker Commit to create images Lab 4 : Link containers (Mysql, Wordpress and Phpmyadmin) Lab 6 : Manage Network Lab 7 : Docker Hub Lab 8 : Manage Docker Registry","title":"2. First Steps"},{"location":"Docker/Docker/#docker-first-steps","text":"","title":"Docker : First Steps"},{"location":"Docker/Docker/#lab-1-installation","text":"According to Docker Docs , Docker Engine can be installed in different ways, depending on our needs: - Most users set up Docker\u2019s repositories and install from them, for ease of installation and upgrade tasks. This is the recommended approach. Some users download the DEB package and install it manually and manage upgrades completely manually. This is useful in situations such as installing Docker on air-gapped systems with no access to the internet. In testing and development environments, some users choose to use automated convenience scripts to install Docker.","title":"Lab 1 : Installation"},{"location":"Docker/Docker/#linux","text":"","title":"Linux"},{"location":"Docker/Docker/#for-ubuntu","text":"","title":"For Ubuntu"},{"location":"Docker/Docker/#1-set-up-the-repository-docker-ce","text":"Install packages to allow apt to use a repository over HTTPS. sudo apt-get update sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common Add Docker\u2019s official GPG key: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - - Set up the stable repository (amd64): sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $( lsb_release -cs ) stable\"","title":"1. Set up the repository (Docker CE):"},{"location":"Docker/Docker/#2-install-docker","text":"sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io Executing the Docker Command Without Sudo (Optional): sudo usermod -aG docker $(whoami) Note You have to Log out and log back in so that your group membership is re-evaluated. Configure Docker to start on boot sudo systemctl enable docker.service sudo systemctl enable containerd.service Using the Docker Command sudo docker --help sudo docker info sudo docker \"subcommand\" --help","title":"2. Install Docker"},{"location":"Docker/Docker/#for-centos","text":"Installation options are available on Docker Docs for Centos Install using the repository sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo sudo yum install docker-ce docker-ce-cli containerd.io Start Docker Daemon sudo systemctl start docker sudo usermod -aG docker $USER sudo chmod 777 /var/run/docker.sock","title":"For CentOS"},{"location":"Docker/Docker/#windows-10-11","text":"https://docs.docker.com/desktop/windows/install/","title":"Windows 10 / 11"},{"location":"Docker/Docker/#lab-2-build-and-manager-images-dockerfile","text":"Docker offers two types of images: OS images (ubuntu, debian, etc) Dockerized Services /Apps Images (http, nodejs, mongodb, etc) Images are stored in the Docker Registry (Local, or remote like Docker Hub and Docker Store) Different methods to create Docker image : Image pull : loads an archive of files, as a base layer Container commit : create new couche (+ image) from current container Image build : construction form a Dockerfile (commands list)","title":"Lab 2: Build and Manager images (Dockerfile)"},{"location":"Docker/Docker/#working-with-docker-images","text":"Search for images available on Docker Hub: sudo docker search Ubuntu Download ubuntu image to your computer sudo docker pull ubuntu Using default tag: latest latest: Pulling from library/ubuntu ea362f368469: Pull complete Digest: sha256:b5a61709a9a44284d88fb12e5c48db0409cfad5b69d4ff8224077c57302df9cf Status: Downloaded newer image for ubuntu:latest docker.io/library/ubuntu:latest List all local docker images: sudo docker images REPOSITORY TAG IMAGE ID CREATED SIZE ubuntu latest d13c942271d6 3 weeks ago 72.8MB Pull Ubuntu 20.04 image sudo docker pull ubuntu:20.04 List all local docker images: sudo docker images REPOSITORY TAG IMAGE ID CREATED SIZE ubuntu 20.04 d13c942271d6 3 weeks ago 72.8MB ubuntu latest d13c942271d6 3 weeks ago 72.8MB - Run a new container docker1 sudo docker run -it --name docker1 ubuntu:20.04 - Run a new container docker2 sudo docker run -dt --name docker2 ubuntu:20.04 Note d (detach): Run container in background and print container ID i (interactive): Keep STDIN open even if not attached t (tty): Allocate a pseudo-TTY Use the following combination of keys instead: CTRL + P + Q. This command allows to leave the container without turning it off. If you use the exit command again within the container, it will shut down","title":"Working with Docker Images :"},{"location":"Docker/Docker/#build-docker-images","text":"Write a Dockerfile (Openssh and Apache2) $ echo \\ \"FROM ubuntu:20.04 #Install Openssh Server, Apache2 and git ARG DEBIAN_FRONTEND=noninteractive RUN apt-get update && apt-get install -y openssh-server git apache2 vim #Configure ssh RUN mkdir /var/run/sshd RUN echo 'root:root' | chpasswd RUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config #Expose SSH and HTTP ports EXPOSE 22 80\">>Dockerfile Build image sudo docker build -t myimage . Sending build context to Docker daemon 22.96MB Step 1/6 : FROM ubuntu:20.04 ---> 4a689991aa24 Step 2/6 : RUN apt-get update && apt-get install -y openssh-server git apache2 python vim Removing intermediate container 02e7b71e66bf ---> a02abb273ca1 Step 3/6 : RUN mkdir /var/run/sshd ---> Running in 7debc3bd848a ^[[ARemoving intermediate container 7debc3bd848a ---> 43701b93496d Step 4/6 : RUN echo 'root:root' | chpasswd ---> Running in 4958eb98f69b Removing intermediate container 4958eb98f69b ---> 86051bdd6380 Step 5/6 : RUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config ---> Running in df9955a1969b Removing intermediate container df9955a1969b ---> ce0c596cd18b Step 6/6 : EXPOSE 22 80 ---> Running in 1ef65145106a Removing intermediate container 1ef65145106a ---> 4fdd24f1b727 Successfully built 4fdd24f1b727 Successfully tagged myimage:latest List all local docker images sudo docker images REPOSITORY TAG IMAGE ID CREATED SIZE myimage latest d83e3fd00475 40 seconds ago 365MB ubuntu 20.04 d13c942271d6 3 weeks ago 72.8MB ubuntu latest d13c942271d6 3 weeks ago 72.8MB Build new version 'v1.0' sudo docker build -t=\"myimage:v1.0\" . Sending build context to Docker daemon 2.048kB Step 1/7 : FROM ubuntu:20.04 ---> d13c942271d6 Step 2/7 : ARG DEBIAN_FRONTEND=noninteractive ---> Using cache ---> 1382eae51bd9 Step 3/7 : RUN apt-get update && apt-get install -y openssh-server git apache2 vim ---> Using cache ---> b46e2d48bebb Step 4/7 : RUN mkdir /var/run/sshd ---> Using cache ---> c5ac495fe893 Step 5/7 : RUN echo 'root:root' | chpasswd ---> Using cache ---> aed6d12fa09d Step 6/7 : RUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config ---> Using cache ---> 89c476d90de8 Step 7/7 : EXPOSE 22 80 ---> Using cache ---> d83e3fd00475 Successfully built d83e3fd00475 Successfully tagged myimage:v1.0 List all local docker images sudo docker images REPOSITORY TAG IMAGE ID CREATED SIZE myimage latest d83e3fd00475 6 minutes ago 365MB myimage v1.0 d83e3fd00475 6 minutes ago 365MB ubuntu 20.04 d13c942271d6 3 weeks ago 72.8MB ubuntu latest d13c942271d6 3 weeks ago 72.8MB","title":"Build Docker Images"},{"location":"Docker/Docker/#lab-3-manage-containers-life-cycle-ssh-port-forwarding","text":"","title":"Lab 3 : Manage Containers (Life Cycle, SSH, Port Forwarding)"},{"location":"Docker/Docker/#create-one-container","text":"Remove all existing containers sudo docker rm -f $(sudo docker ps -a -q) Create a container with the new image sudo docker run -it --name docker1 myimage root@8cdc395b34ca:/# exit exit docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES docker start docker1 docker1 docker exec -d docker1 ls docker attach docker1 root@8cdc395b34ca:/# root@8cdc395b34ca:/# exit exit sudo docker run -dt --name docker2 myimage bin/sh -c \"while true; do echo hello world; sleep 1; done\" 7f192eb6f5bf7079843b30e1f7d3b2e7b4f8f12bb7c48a63101760e814633c07 # Display Docker2 logs sudo docker logs docker2 hello world hello world hello world hello world docker top docker2 UID PID PPID C STIME TTY TIME CMD root 18654 18630 0 17:50 pts/0 00:00:00 bin/sh -c while true; do echo hello world; sleep 1; done root 18908 18654 0 17:52 pts/0 00:00:00 sleep 1 # Stop the VMs sudo docker stop docker1 docker2 # Delete the VMs sudo docker rm docker1 docker2","title":"Create One container"},{"location":"Docker/Docker/#create-2-containers-with-port-forwarding","text":"There are two methods for assigning network ports to the Docker host: Docker can randomly assign a port (in the range 32768-61000) from the Docker host that it will map to the port 80 of the container. It is also possible to specify a port (for ex. 81 and 82) # Delete all containers sudo docker rm -f $(sudo docker ps -a -q) # Create 2 new containers sudo docker run -dt -p 81:80 --name docker1 myimage sudo docker run -dt -p 82:80 --name docker2 myimage sudo docker ps sudo docker info","title":"Create 2 containers with port forwarding:"},{"location":"Docker/Docker/#access-with-ssh","text":"Start SSH Daemon sudo docker exec -d docker1 /etc/init.d/ssh start sudo docker exec -d docker2 /etc/init.d/ssh start - Check IP Address of containers sudo docker inspect docker1 # get only the Ipv4 Adress sudo docker inspect --format '{{ .NetworkSettings.IPAddress }}' docker1 172.17.0.2 172.17.0.2 ssh root@172.17.0.2 # You can change the root password by running the following docker command: docker exec -itu 0 docker1 passwd","title":"Access with SSH:"},{"location":"Docker/Docker/#start-apache2-server","text":"Start Apache2 server sudo docker exec -d docker1 /etc/init.d/apache2 start sudo docker exec -d docker2 /etc/init.d/apache2 start","title":"Start Apache2 Server:"},{"location":"Docker/Docker/#-on-browser-try-to-connect","text":"http://localhost:80 http://localhost:81","title":"-  On browser try to connect :"},{"location":"Docker/Docker/#delete-all-containers-runining-and-stoped","text":"","title":"Delete all containers (runining and stoped)"},{"location":"Docker/Docker/#running-web-application","text":"","title":"Running web application:"},{"location":"Docker/Docker/#use-docker-commit-to-create-images","text":"","title":"Use Docker Commit to create images"},{"location":"Docker/Docker/#lab-4-link-containers-mysql-wordpress-and-phpmyadmin","text":"","title":"Lab 4 : Link containers (Mysql, Wordpress and Phpmyadmin)"},{"location":"Docker/Docker/#lab-6-manage-network","text":"","title":"Lab 6 : Manage Network"},{"location":"Docker/Docker/#lab-7-docker-hub","text":"","title":"Lab 7 : Docker Hub"},{"location":"Docker/Docker/#lab-8-manage-docker-registry","text":"","title":"Lab 8 : Manage Docker Registry"},{"location":"Docker/Compose/Docker-compose/","text":"Docker Labs - Docker Compose","title":"3. Docker-compose"},{"location":"Docker/Compose/Docker-compose/#docker-labs-docker-compose","text":"","title":"Docker Labs - Docker Compose"},{"location":"Docker/History/History/","text":"Pr\u00e9sentation : Docker 1. Introduction Dans cette pr\u00e9sention, je vous donnerai des r\u00e9ponses aux questions suivantes : Conteneurs Linux LXC et Conteneurs Docker: Quelle(s) diff\u00e9rence(s)? Pourquoi utiliser des conteneurs plut\u00f4t que des Machines Virtuelles? Pourquoi utilise-t-on Docker et quelles sont ses atouts dans le d\u00e9veloppement et le d\u00e9ploiement des applications cloud-native? Conteneurs, sont-ils vraiment populaires dans les Data Center / Cloud Computing? Docker, Cloud, DevOps et microservices, quel lien? PS : les chapitres 1 & 2 ne contiennent que des explications visuelles, la r\u00e9daction commence \u00e0 la fin du chapitre 2. Big Picture ... Infrastructure IT: Changement de vitesse Docker (utilisation 2021) Adoption de la Technologie Conteneur Docker La Technologie Conteneur r\u00e9volutionne le Cloud Docker = La voie vers DevOps DevOps = Int\u00e9gration Continue & D\u00e9ploiement Continu (CI/CD) 2. Le Challenge Services ET Environnements multiples : Comment d\u00e9ployer? Produits ET Moyens multiples = Comment transporter? Usage des conteneurs = Portabilit\u00e9 Qu\u2019est ce qu\u2019un Conteneur ? Un processus s\u2019ex\u00e9cutant sur son propre syst\u00e8me de fichiers Vision limit\u00e9e du syst\u00e8me sur lequel il tourne Optimisation de l'usage des ressources Le noyau quant \u00e0 lui, est partag\u00e9 avec le syst\u00e8me h\u00f4te. D\u00e9riv\u00e9 du principe de CHROOT (sous Unix) et de m\u00e9canisme d\u2019isolation de syst\u00e8me de fichiers Une application packag\u00e9e dans un Rootfs Un Rootfs (le / d'un Linux) qui est appel\u00e9 image contient : 3. Conteneur Linux LXC LXC : C\u2019est quoi? La virtualisation par conteneurs se base sur la virtualisation Linux LXC, pour Linux Containers. Il s\u2019agit d\u2019une m\u00e9thode de cloisonnement au niveau de l\u2019OS. LXC est utilis\u00e9 pour faire fonctionner plusieurs instances Linux isol\u00e9s les uns des autres dans des conteneurs partageant le m\u00eame noyau et une petite partie du syst\u00e8me h\u00f4te. Chroot par rapport \u00e0 LXC Chroot est moins s\u00e9curis\u00e9 : Un conteneur chroot\u00e9 partage son /proc et son /dev avec l'h\u00f4te, et il a donc tout libert\u00e9 pour s'introduire dans le syst\u00e8me Chroot donne une isolation moins faible : M\u00eame si le syst\u00e8me de fichier d\u2019un conteneur est correctement isol\u00e9, les processus (li\u00e9s aux services qui tournent dedans) ne sont pas isol\u00e9s (ils peuvent voir ceux de l\u2019h\u00f4te) Les services d\u2019un conteneur \u00e9coutent sur la m\u00eame interface r\u00e9seau Il n'est pas pratique du tout d\u00e9s qu'il s'agit de faire tourner plein de services dans le conteneur LXC offre un jeu de nouvelles techniques d\u2019isolation dans le kernel permettant de cr\u00e9er facilement un super-chroot beaucoup plus isolant que la version d'origine. LXC : Technologies de base LXC repose sur la notion de groupes de contr\u00f4le Linux (cgroups) disponibles depuis sa version 2.6.24 Chaque groupe de contr\u00f4le permet de limiter et d\u2019isoler l\u2019utilisation des ressources qu\u2019un processus peut utiliser (processeur, m\u00e9moire, r\u00e9seau, syst\u00e8me de fichier et acc\u00e8s E/S), et ce sans recourir \u00e0 des machines virtuelles \u00e0 part enti\u00e8re. LXC repose aussi sur une isolation des espaces de nommage du noyau (namespace): Permet d\u2019emp\u00eacher qu\u2019un groupe puisse \u00ab voir \u00bb les ressources des autres groupes (syst\u00e8mes de fichiers, les ID r\u00e9seau et les ID utilisateur) LXC repose sur les biblioth\u00e8ques Profils Apparmor (Application Armor) et SELinux (Security-Enhanced Linux) pour la s\u00e9curit\u00e9 : En termes des restrictions, permissions et droits utilisateur LXC : Vue d\u2019ensemble Docker : Un LXC augment\u00e9 Docker ne remplace pas les conteneurs Linux LXC (lanc\u00e9 en 2013) L'id\u00e9e consiste \u00e0 utiliser LXC comme base, puis \u00e0 ajouter des capacit\u00e9s de niveau sup\u00e9rieur Docker autorise la portabilit\u00e9 entre machines (qui ex\u00e9cutent aussi Docker) et permet ainsi \u00e0 une application et \u00e0 ses composants d'exister en tant qu'objet mobile unique. Avec LXC, d\u00e9placer une application sur une autre machine peut introduire des diff\u00e9rences susceptibles d'emp\u00eacher le conteneur de l'application de s'ex\u00e9cuter. Docker pour les DEV Build once\u2026 run everywhere Un conteneur Docker est un environnement s\u00e9curis\u00e9, stable, portable sur tous environnements Docker r\u00e9sout les probl\u00e8mes de d\u00e9pendances ou de packages manquant lors du d\u00e9ploiement Docker pour les DEV Configure once\u2026 run everywhere Rend le cycle de vie des applications plus efficace, consistant, et reproductible Am\u00e9liore le rendu de la qualit\u00e9 du code d\u00e9velopp\u00e9 \u00c9limine d\u00e9finitivement les inconsistances entre les diff\u00e9rents environnements de d\u00e9veloppement, test, et production Docker pour l\u2019entreprise Une m\u00eame plate-forme pour toutes les applications Acc\u00e9l\u00e8re la mise en place de pipelines de d\u00e9ploiement automatiques Interface commune qui permet aux Devs et Ops de travailler ensemble Am\u00e9liore l\u2019autonomie et la productivit\u00e9 des \u00e9quipes Dev et Ops ==> Agilit\u00e9, Portabilit\u00e9, Consistance, Optimisation des co\u00fbts, Elasticit\u00e9/Scalabilit\u00e9\u2026 Histoire 2008 : dotCloud, co-fond\u00e9e by Solomon Hykes PaaS o D\u00e9but de la plate-forme Docker qui simplifie l\u2019usage des containers Linux 2010 : dotCloud incub\u00e9e \u00e0 Ycombinator 2011 : Plate-forme Docker mise en open source 2013 : Cr\u00e9ation de Docker.Inc pour soutenir le projet 2017 : Dissociation du produit Docker et du projet Moby Format des conteneurs Docker Avant Docker 0.9 Utilisation de la technologie LXC pour g\u00e9rer les containers Depuis Docker 0.9 Access direct \u00e0 l\u2019API des containers Linux Utilisation de la librairie libcontainer (un wrapper qui combine les Namespaces + Cgroup + UnionFS) UnionFS offre un stockage sur plusieurs couches en lecture seule (l\u00e9ger et rapide), utilis\u00e9 pour fournir les blocs de construction des conteneurs Editions Docker : CE et EE Open Container Initiative OCI D\u00e9marche initi\u00e9e par Docker et CoreOS et cr\u00e9\u00e9e par la Linux Foundation en 2015 Cr\u00e9er une gouvernance des technologies de containers (sp\u00e9cifications et standardisation minima autour des technologies de containerisation) Unification des formats de containers (Docker, Rocket\u2026) Standardiser les formats des images de containers pour faciliter l\u2019interop\u00e9rabilit\u00e9 entre les solutions du march\u00e9 et les cloud providers Standardiser certaines actions des moteurs \u00ab runtime \u00bb afin de disposer de commandes communes (start, exec, pause..) 4. Conteneurs VS Machines virtuelles Hyperviseur vs Docker Hyperviseur vs Docker (Analogie) Pourquoi des conteneurs plut\u00f4t que des machines virtuelles ? -Les conteneurs Docker r\u00e9volutionnent la virtualisation car l\u2019id\u00e9e n\u2019est pas nouvelle - La virtualisation a un co\u00fbt car les OS invit\u00e9s requi\u00e8rent chacun des ressources (m\u00e9moire, CPU, r\u00e9seaux) - Augmentation de la taille de chaque machine virtuelle, ce qui limite le nombre de machines virtuelles qu'un serveur peut h\u00e9berger - La conteneurisation vise \u00e0 virtualiser les applications sans trop alourdir le syst\u00e8me - Favoriser l'int\u00e9gration rapide d'applications dans des conteneurs. Des conteneurs dans des VMs ? 5. Plateforme Docker Docker : Vue d\u2019ensemble 6. Images Docker","title":"1. Introduction"},{"location":"Docker/History/History/#presentation-docker","text":"","title":"Pr\u00e9sentation : Docker"},{"location":"Docker/History/History/#1-introduction","text":"Dans cette pr\u00e9sention, je vous donnerai des r\u00e9ponses aux questions suivantes : Conteneurs Linux LXC et Conteneurs Docker: Quelle(s) diff\u00e9rence(s)? Pourquoi utiliser des conteneurs plut\u00f4t que des Machines Virtuelles? Pourquoi utilise-t-on Docker et quelles sont ses atouts dans le d\u00e9veloppement et le d\u00e9ploiement des applications cloud-native? Conteneurs, sont-ils vraiment populaires dans les Data Center / Cloud Computing? Docker, Cloud, DevOps et microservices, quel lien? PS : les chapitres 1 & 2 ne contiennent que des explications visuelles, la r\u00e9daction commence \u00e0 la fin du chapitre 2.","title":"1. Introduction"},{"location":"Docker/History/History/#big-picture","text":"","title":"Big Picture ..."},{"location":"Docker/History/History/#infrastructure-it-changement-de-vitesse","text":"","title":"Infrastructure IT: Changement de vitesse"},{"location":"Docker/History/History/#docker-utilisation-2021","text":"","title":"Docker (utilisation 2021)"},{"location":"Docker/History/History/#adoption-de-la-technologie-conteneur-docker","text":"","title":"Adoption de la Technologie Conteneur Docker"},{"location":"Docker/History/History/#la-technologie-conteneur-revolutionne-le-cloud","text":"","title":"La Technologie Conteneur r\u00e9volutionne le Cloud"},{"location":"Docker/History/History/#docker-la-voie-vers-devops","text":"DevOps = Int\u00e9gration Continue & D\u00e9ploiement Continu (CI/CD)","title":"Docker = La voie vers DevOps"},{"location":"Docker/History/History/#2-le-challenge","text":"","title":"2. Le Challenge"},{"location":"Docker/History/History/#services-et-environnements-multiples-comment-deployer","text":"","title":"Services ET Environnements multiples : Comment d\u00e9ployer?"},{"location":"Docker/History/History/#produits-et-moyens-multiples-comment-transporter","text":"","title":"Produits ET Moyens multiples = Comment transporter?"},{"location":"Docker/History/History/#usage-des-conteneurs-portabilite","text":"","title":"Usage des conteneurs = Portabilit\u00e9"},{"location":"Docker/History/History/#quest-ce-quun-conteneur","text":"Un processus s\u2019ex\u00e9cutant sur son propre syst\u00e8me de fichiers Vision limit\u00e9e du syst\u00e8me sur lequel il tourne Optimisation de l'usage des ressources Le noyau quant \u00e0 lui, est partag\u00e9 avec le syst\u00e8me h\u00f4te. D\u00e9riv\u00e9 du principe de CHROOT (sous Unix) et de m\u00e9canisme d\u2019isolation de syst\u00e8me de fichiers Une application packag\u00e9e dans un Rootfs Un Rootfs (le / d'un Linux) qui est appel\u00e9 image contient :","title":"Qu\u2019est ce qu\u2019un Conteneur ?"},{"location":"Docker/History/History/#3-conteneur-linux-lxc","text":"","title":"3. Conteneur Linux LXC"},{"location":"Docker/History/History/#lxc-cest-quoi","text":"La virtualisation par conteneurs se base sur la virtualisation Linux LXC, pour Linux Containers. Il s\u2019agit d\u2019une m\u00e9thode de cloisonnement au niveau de l\u2019OS. LXC est utilis\u00e9 pour faire fonctionner plusieurs instances Linux isol\u00e9s les uns des autres dans des conteneurs partageant le m\u00eame noyau et une petite partie du syst\u00e8me h\u00f4te.","title":"LXC : C\u2019est quoi?"},{"location":"Docker/History/History/#chroot-par-rapport-a-lxc","text":"Chroot est moins s\u00e9curis\u00e9 : Un conteneur chroot\u00e9 partage son /proc et son /dev avec l'h\u00f4te, et il a donc tout libert\u00e9 pour s'introduire dans le syst\u00e8me Chroot donne une isolation moins faible : M\u00eame si le syst\u00e8me de fichier d\u2019un conteneur est correctement isol\u00e9, les processus (li\u00e9s aux services qui tournent dedans) ne sont pas isol\u00e9s (ils peuvent voir ceux de l\u2019h\u00f4te) Les services d\u2019un conteneur \u00e9coutent sur la m\u00eame interface r\u00e9seau Il n'est pas pratique du tout d\u00e9s qu'il s'agit de faire tourner plein de services dans le conteneur LXC offre un jeu de nouvelles techniques d\u2019isolation dans le kernel permettant de cr\u00e9er facilement un super-chroot beaucoup plus isolant que la version d'origine.","title":"Chroot par rapport \u00e0 LXC"},{"location":"Docker/History/History/#lxc-technologies-de-base","text":"LXC repose sur la notion de groupes de contr\u00f4le Linux (cgroups) disponibles depuis sa version 2.6.24 Chaque groupe de contr\u00f4le permet de limiter et d\u2019isoler l\u2019utilisation des ressources qu\u2019un processus peut utiliser (processeur, m\u00e9moire, r\u00e9seau, syst\u00e8me de fichier et acc\u00e8s E/S), et ce sans recourir \u00e0 des machines virtuelles \u00e0 part enti\u00e8re. LXC repose aussi sur une isolation des espaces de nommage du noyau (namespace): Permet d\u2019emp\u00eacher qu\u2019un groupe puisse \u00ab voir \u00bb les ressources des autres groupes (syst\u00e8mes de fichiers, les ID r\u00e9seau et les ID utilisateur) LXC repose sur les biblioth\u00e8ques Profils Apparmor (Application Armor) et SELinux (Security-Enhanced Linux) pour la s\u00e9curit\u00e9 : En termes des restrictions, permissions et droits utilisateur","title":"LXC : Technologies de base"},{"location":"Docker/History/History/#lxc-vue-densemble","text":"","title":"LXC : Vue d\u2019ensemble"},{"location":"Docker/History/History/#docker-un-lxc-augmente","text":"Docker ne remplace pas les conteneurs Linux LXC (lanc\u00e9 en 2013) L'id\u00e9e consiste \u00e0 utiliser LXC comme base, puis \u00e0 ajouter des capacit\u00e9s de niveau sup\u00e9rieur Docker autorise la portabilit\u00e9 entre machines (qui ex\u00e9cutent aussi Docker) et permet ainsi \u00e0 une application et \u00e0 ses composants d'exister en tant qu'objet mobile unique. Avec LXC, d\u00e9placer une application sur une autre machine peut introduire des diff\u00e9rences susceptibles d'emp\u00eacher le conteneur de l'application de s'ex\u00e9cuter.","title":"Docker : Un LXC augment\u00e9"},{"location":"Docker/History/History/#docker-pour-les-dev","text":"Build once\u2026 run everywhere Un conteneur Docker est un environnement s\u00e9curis\u00e9, stable, portable sur tous environnements Docker r\u00e9sout les probl\u00e8mes de d\u00e9pendances ou de packages manquant lors du d\u00e9ploiement","title":"Docker pour les DEV"},{"location":"Docker/History/History/#docker-pour-les-dev_1","text":"Configure once\u2026 run everywhere Rend le cycle de vie des applications plus efficace, consistant, et reproductible Am\u00e9liore le rendu de la qualit\u00e9 du code d\u00e9velopp\u00e9 \u00c9limine d\u00e9finitivement les inconsistances entre les diff\u00e9rents environnements de d\u00e9veloppement, test, et production","title":"Docker pour les DEV"},{"location":"Docker/History/History/#docker-pour-lentreprise","text":"Une m\u00eame plate-forme pour toutes les applications Acc\u00e9l\u00e8re la mise en place de pipelines de d\u00e9ploiement automatiques Interface commune qui permet aux Devs et Ops de travailler ensemble Am\u00e9liore l\u2019autonomie et la productivit\u00e9 des \u00e9quipes Dev et Ops ==> Agilit\u00e9, Portabilit\u00e9, Consistance, Optimisation des co\u00fbts, Elasticit\u00e9/Scalabilit\u00e9\u2026","title":"Docker pour l\u2019entreprise"},{"location":"Docker/History/History/#histoire","text":"2008 : dotCloud, co-fond\u00e9e by Solomon Hykes PaaS o D\u00e9but de la plate-forme Docker qui simplifie l\u2019usage des containers Linux 2010 : dotCloud incub\u00e9e \u00e0 Ycombinator 2011 : Plate-forme Docker mise en open source 2013 : Cr\u00e9ation de Docker.Inc pour soutenir le projet 2017 : Dissociation du produit Docker et du projet Moby","title":"Histoire"},{"location":"Docker/History/History/#format-des-conteneurs-docker","text":"Avant Docker 0.9 Utilisation de la technologie LXC pour g\u00e9rer les containers Depuis Docker 0.9 Access direct \u00e0 l\u2019API des containers Linux Utilisation de la librairie libcontainer (un wrapper qui combine les Namespaces + Cgroup + UnionFS) UnionFS offre un stockage sur plusieurs couches en lecture seule (l\u00e9ger et rapide), utilis\u00e9 pour fournir les blocs de construction des conteneurs","title":"Format des conteneurs Docker"},{"location":"Docker/History/History/#editions-docker-ce-et-ee","text":"","title":"Editions Docker : CE et EE"},{"location":"Docker/History/History/#open-container-initiative-oci","text":"D\u00e9marche initi\u00e9e par Docker et CoreOS et cr\u00e9\u00e9e par la Linux Foundation en 2015 Cr\u00e9er une gouvernance des technologies de containers (sp\u00e9cifications et standardisation minima autour des technologies de containerisation) Unification des formats de containers (Docker, Rocket\u2026) Standardiser les formats des images de containers pour faciliter l\u2019interop\u00e9rabilit\u00e9 entre les solutions du march\u00e9 et les cloud providers Standardiser certaines actions des moteurs \u00ab runtime \u00bb afin de disposer de commandes communes (start, exec, pause..)","title":"Open Container Initiative OCI"},{"location":"Docker/History/History/#4-conteneurs-vs-machines-virtuelles","text":"","title":"4. Conteneurs VS Machines virtuelles"},{"location":"Docker/History/History/#hyperviseur-vs-docker","text":"","title":"Hyperviseur vs Docker"},{"location":"Docker/History/History/#hyperviseur-vs-docker-analogie","text":"Pourquoi des conteneurs plut\u00f4t que des machines virtuelles ? -Les conteneurs Docker r\u00e9volutionnent la virtualisation car l\u2019id\u00e9e n\u2019est pas nouvelle - La virtualisation a un co\u00fbt car les OS invit\u00e9s requi\u00e8rent chacun des ressources (m\u00e9moire, CPU, r\u00e9seaux) - Augmentation de la taille de chaque machine virtuelle, ce qui limite le nombre de machines virtuelles qu'un serveur peut h\u00e9berger - La conteneurisation vise \u00e0 virtualiser les applications sans trop alourdir le syst\u00e8me - Favoriser l'int\u00e9gration rapide d'applications dans des conteneurs.","title":"Hyperviseur vs Docker (Analogie)"},{"location":"Docker/History/History/#des-conteneurs-dans-des-vms","text":"","title":"Des conteneurs dans des VMs ?"},{"location":"Docker/History/History/#5-plateforme-docker","text":"","title":"5. Plateforme Docker"},{"location":"Docker/History/History/#docker-vue-densemble","text":"","title":"Docker : Vue d\u2019ensemble"},{"location":"Docker/History/History/#6-images-docker","text":"","title":"6. Images Docker"},{"location":"Docker/Swarm/Docker%20Swarm/","text":"Docker Labs - Docker Swarm","title":"4. Docker Swarm"},{"location":"Docker/Swarm/Docker%20Swarm/#docker-labs-docker-swarm","text":"","title":"Docker Labs - Docker Swarm"},{"location":"Iaac/Ansible/","text":"Ansible Labs","title":"Ansible"},{"location":"Iaac/Ansible/#ansible-labs","text":"","title":"Ansible Labs"},{"location":"Iaac/Terraform/","text":"Terraform Lab","title":"Terraform"},{"location":"Iaac/Terraform/#terraform-lab","text":"","title":"Terraform Lab"},{"location":"Iaac/Vagrant/","text":"Vagrant Labs 1. VMware Workstation Prerequis : Vagrant install\u00e9 sur la machine h\u00f4te ==> https://www.vagrantup.com/downloads vmware utility install\u00e9 ==> https://www.vagrantup.com/vmware/downloads Installer VMware provider plugin avec la commande : vagrant plugin install vagrant-vmware-desktop Cr\u00e9ation de la VM : Cloner le dep\u00f4t : git clone git@github.com:fghamacha/vagrant.git acc\u00e9der au dossier souhaiter et cr\u00e9er le VM en lan\u00e7ant la commande : vagrant up la cr\u00e9ation de la VM n'est pas instantan\u00e9e, il faut vagrant download l'image de la VM depuis le site https://vagrantcloud.com Cr\u00e9ation de la VM : Pour lancer powershell de la machine guest dans la machine h\u00f4te : vagrant powershell Lancer directement une commande powershell vagrant powershell -c MaCommande D\u00e9truire la VM Pour d\u00e9truire la VM : vagrant destroy 2. VMware ESXI 3. VirtualBox","title":"Vagrant"},{"location":"Iaac/Vagrant/#vagrant-labs","text":"","title":"Vagrant Labs"},{"location":"Iaac/Vagrant/#1-vmware-workstation","text":"","title":"1. VMware Workstation"},{"location":"Iaac/Vagrant/#prerequis","text":"Vagrant install\u00e9 sur la machine h\u00f4te ==> https://www.vagrantup.com/downloads vmware utility install\u00e9 ==> https://www.vagrantup.com/vmware/downloads Installer VMware provider plugin avec la commande : vagrant plugin install vagrant-vmware-desktop","title":"Prerequis :"},{"location":"Iaac/Vagrant/#creation-de-la-vm","text":"Cloner le dep\u00f4t : git clone git@github.com:fghamacha/vagrant.git acc\u00e9der au dossier souhaiter et cr\u00e9er le VM en lan\u00e7ant la commande : vagrant up la cr\u00e9ation de la VM n'est pas instantan\u00e9e, il faut vagrant download l'image de la VM depuis le site https://vagrantcloud.com","title":"Cr\u00e9ation de la VM :"},{"location":"Iaac/Vagrant/#creation-de-la-vm_1","text":"Pour lancer powershell de la machine guest dans la machine h\u00f4te : vagrant powershell Lancer directement une commande powershell vagrant powershell -c MaCommande","title":"Cr\u00e9ation de la VM :"},{"location":"Iaac/Vagrant/#detruire-la-vm","text":"Pour d\u00e9truire la VM : vagrant destroy","title":"D\u00e9truire la VM"},{"location":"Iaac/Vagrant/#2-vmware-esxi","text":"","title":"2. VMware ESXI"},{"location":"Iaac/Vagrant/#3-virtualbox","text":"","title":"3. VirtualBox"},{"location":"K8s/Kubernetes/","text":"Docker Labs - Kubernetes","title":"Kubernetes"},{"location":"K8s/Kubernetes/#docker-labs-kubernetes","text":"","title":"Docker Labs - Kubernetes"}]}